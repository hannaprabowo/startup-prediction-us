summarise(n = n())
View(artist)
# eda on number of songs played by artist
artist <- history_all %>%
group_by(artistName) %>%
summarise(n = n()) %>%
desc()
# eda on number of songs played by artist
artist <- history_all %>%
group_by(artistName) %>%
summarise(n = n()) %>%
desc(n)
# eda on number of songs played by artist
artist <- history_all %>%
group_by(artistName) %>%
summarise(n = n()) %>%
arrange(desc(n))
View(artist)
barplot(artist)
ggplot(artist) +
geom_bar()
ggplot() +
geom_bar(data = artist)
ggplot() +
geom_bar(data = artist,
x = artistName)
ggplot() +
geom_bar(data = artist,
x = 'artistName')
ggplot() +
geom_bar(data = artist,
x = 'artistName',
y = 'n')
ggplot() +
geom_col(data = artist,
x = 'artistName',
y = 'n')
ggplot() +
geom_col(data = artist)
ggplot() +
geom_histogram(data = artist)
ggplot(data = artist) +
geom_histogram()
ggplot(data = history_all) +
geom_histogram()
ggplot(data = history_all)
ggplot(data = history_all,
aes(x = artistName))
ggplot(data = artist,
aes(x = artistName,
y = n))
ggplot(data = artist,
aes(x = artistName))
artist <- artist[artist$n<100]
artist <- artist[artist$n<100,]
View(artist)
# eda on number of songs played by artist
artist <- history_all %>%
group_by(artistName) %>%
summarise(n = n()) %>%
arrange(desc(n))
artist <- artist[artist$n>100,]
artist <- artist[artist$n>100,] # subset to artists that has been played more than 100
View(artist)
ggplot(data = artist,
aes(x = artistName,
y = n))
ggplot(data = artist[-1,],
aes(x = artistName,
y = n))
artist[-1,]
ggplot(data = artist[-c(1:3),],
aes(x = artistName,
y = n))
ggplot(data = artist[-c(1:3),],
aes(x = artistName,
y = n)) +
geom_histogram()
ggplot(data = artist[-c(1:3),],
aes(x = artistName)) +
geom_histogram()
ggplot(data = artist[-c(1:3),],
aes(x = artistName,
y = n)) +
geom_col()
ggplot(data = artist[-c(1:3),],
aes(x = artistName,
y = n)) +
geom_col() +
coord_flip()
ggplot(data = artist,
aes(x = artistName,
y = n)) +
geom_col() +
coord_flip()
ggplot(data = artist,
aes(x = artistName,
y = n)) +
geom_col() +
desc()
ggplot(data = artist,
aes(x = reorder(artistName, -n)
y = n)) +
ggplot(data = artist,
aes(x = reorder(artistName, -n),
y = n)) +
geom_col() +
coord_flip()
ggplot(data = artist,
aes(x = reorder(artistName, n),
y = n)) +
geom_col() +
coord_flip()
artist <- artist[-artist$artistName=='Silent Meditation, No Sound Pause Breaks',]
artist <- artist[artist$artistName !='Silent Meditation, No Sound Pause Breaks',]
View(artist)
ggplot(data = artist,
aes(x = reorder(artistName, n),
y = n)) +
geom_col() +
coord_flip()
?aes
# First historgram on number of songs played by artist
ggplot(data = artist,
aes(x = reorder(artistName, n),
y = n)) +
geom_col() +
coord_flip() +
theme(plot.title = "Number of songs played by artist")
# First historgram on number of songs played by artist
ggplot(data = artist,
aes(x = reorder(artistName, n),
y = n)) +
geom_col() +
coord_flip() +
theme(title = "Number of songs played by artist")
# First historgram on number of songs played by artist
ggplot(data = artist,
aes(x = reorder(artistName, n),
y = n),
theme(title = "Number of songs played by artist")) +
geom_col() +
coord_flip()
# First historgram on number of songs played by artist
ggplot(data = artist,
aes(x = reorder(artistName, n),
y = n)) +
geom_col() +
theme(title = "Number of songs played by artist") +
coord_flip()
# First historgram on number of songs played by artist
ggplot(data = artist,
aes(x = reorder(artistName, n),
y = n)) +
geom_col() +
theme_minimal() +
coord_flip()
# First historgram on number of songs played by artist
ggplot(data = artist,
aes(x = reorder(artistName, n),
y = n)) +
geom_col() +
labs(title = 'Number of songs played by artist',
x = 'Amount',
y = "Artist")
# First historgram on number of songs played by artist
ggplot(data = artist,
aes(x = reorder(artistName, n),
y = n)) +
geom_col() +
labs(title = 'Number of songs played by artist',
x = 'Amount',
y = "Artist")
# First historgram on number of songs played by artist
ggplot(data = artist,
aes(x = reorder(artistName, n),
y = n)) +
geom_col() +
labs(title = 'Number of songs played by artist',
x = 'Amount',
y = "Artist") +
theme_minimal() +
coord_flip()
# First historgram on number of songs played by artist
ggplot(data = artist,
aes(x = reorder(artistName, n),
y = n)) +
geom_col() +
labs(title = 'Number of songs played by artist',
y = 'Amount',
x = "Artist") +
theme_minimal() +
coord_flip()
?labs
View(history_all)
# First historgram on number of songs played by artist
ggplot(data = artist,
aes(x = reorder(artistName, n),
y = n)) +
geom_col() +
labs(title = 'Number of songs played by artist',
y = 'Amount',
x = "Artist",
subtitle = 'Sep 2023 - Sep 2024') +
theme_minimal() +
coord_flip()
# First historgram on number of songs played by artist
ggplot(data = artist,
aes(x = reorder(artistName, n),
y = n)) +
geom_col() +
labs(title = 'Number of songs played by artist',
y = 'Amount',
x = "Artist",
subtitle = 'Sep 2023 - Sep 2024',
col = unique(artist$artistName)) +
theme_minimal() +
coord_flip()
# First historgram on number of songs played by artist
ggplot(data = artist,
aes(x = reorder(artistName, n),
y = n)) +
geom_col() +
labs(title = 'Number of songs played by artist',
y = 'Amount',
x = "Artist",
subtitle = 'Sep 2023 - Sep 2024',
colour = unique(artist$artistName)) +
theme_minimal() +
coord_flip()
# First historgram on number of songs played by artist
ggplot(data = artist,
aes(x = reorder(artistName, n),
y = n)) +
geom_col() +
labs(title = 'Number of songs played by artist',
y = 'Amount',
x = "Artist",
subtitle = 'Sep 2023 - Sep 2024',
colour = 'blue') +
theme_minimal() +
coord_flip()
# First historgram on number of songs played by artist
ggplot(data = artist,
aes(x = reorder(artistName, n),
y = n)) +
geom_col() +
labs(title = 'Number of songs played by artist',
y = 'Amount',
x = "Artist",
subtitle = 'Sep 2023 - Sep 2024',
colour = 'blue') +
coord_flip()
# First historgram on number of songs played by artist
ggplot(data = artist,
aes(x = reorder(artistName, n),
y = n,
colour = 'blue')) +
geom_col() +
labs(title = 'Number of songs played by artist',
y = 'Amount',
x = "Artist",
subtitle = 'Sep 2023 - Sep 2024') +
theme_minimal() +
coord_flip()
# First historgram on number of songs played by artist
ggplot(data = artist,
aes(x = reorder(artistName, n),
y = n)) +
geom_col(aes(colour = 'blue')) +
labs(title = 'Number of songs played by artist',
y = 'Amount',
x = "Artist",
subtitle = 'Sep 2023 - Sep 2024') +
theme_minimal() +
coord_flip()
# First historgram on number of songs played by artist
ggplot(data = artist,
aes(x = reorder(artistName, n),
y = n,
colour = artistName)) +
geom_col() +
labs(title = 'Number of songs played by artist',
y = 'Amount',
x = "Artist",
subtitle = 'Sep 2023 - Sep 2024') +
theme_minimal() +
coord_flip()
# First historgram on number of songs played by artist
ggplot(data = artist,
aes(x = reorder(artistName, n),
y = n,
fill = artistName)) +
geom_col() +
labs(title = 'Number of songs played by artist',
y = 'Amount',
x = "Artist",
subtitle = 'Sep 2023 - Sep 2024') +
theme_minimal() +
coord_flip()
# First historgram on number of songs played by artist
ggplot(data = artist,
aes(x = reorder(artistName, n),
y = n)) +
geom_col() +
labs(title = 'Number of songs played by artist',
y = 'Amount',
x = "Artist",
subtitle = 'Sep 2023 - Sep 2024') +
theme_minimal() +
coord_flip() +
scale_color_brewer(palette = "Dark2")
# First historgram on number of songs played by artist
ggplot(data = artist,
aes(x = reorder(artistName, n),
y = n)) +
geom_col() +
labs(title = 'Number of songs played by artist',
y = 'Amount',
x = "Artist",
subtitle = 'Sep 2023 - Sep 2024') +
theme_minimal() +
coord_flip()
# First historgram on number of songs played by artist
ggplot(data = artist,
aes(x = reorder(artistName, n),
y = n,
colour = n)) +
geom_col() +
labs(title = 'Number of songs played by artist',
y = 'Amount',
x = "Artist",
subtitle = 'Sep 2023 - Sep 2024') +
theme_minimal() +
coord_flip()
# First historgram on number of songs played by artist
ggplot(data = artist,
aes(x = reorder(artistName, n),
y = n,
fill = n)) +
geom_col() +
labs(title = 'Number of songs played by artist',
y = 'Amount',
x = "Artist",
subtitle = 'Sep 2023 - Sep 2024') +
theme_minimal() +
coord_flip()
View(history_all)
View(artist)
View(history_all)
# First historgram on number of songs played by artist
artists_played_plot = ggplot(data = artist,
aes(x = reorder(artistName, n),
y = n,
fill = n)) +
geom_col() +
labs(title = 'Number of songs played by artist',
y = 'Amount',
x = "Artist",
subtitle = 'Sep 2023 - Sep 2024') +
theme_minimal() +
coord_flip()
artists_played_plot
# First historgram on number of songs played by artist
artist_played_plot = ggplot(data = artist,
aes(x = reorder(artistName, n),
y = n,
fill = n)) +
geom_col() +
labs(title = 'Number of songs played by artist',
y = 'Amount',
x = "Artist",
subtitle = 'Sep 2023 - Sep 2024') +
theme_minimal() +
coord_flip()
artists_played_plot
artist_played_plot
artist %>% head()
artist
# Second histogram on number of songs played by artist, excluding Taylor Swift
artist_played_plot_exc_taylor = ggplot(data = artist[-1,],
aes(x = reorder(artistName, n),
y = n,
fill = n)) +
geom_col() +
labs(title = 'Number of songs played by artist - Excl. Taylor Swift',
y = 'Amount',
x = "Artist",
subtitle = 'Sep 2023 - Sep 2024') +
theme_minimal() +
coord_flip()
# View plot
artist_played_plot_exc_taylor
# First histogram on number of songs played by artist
artist_played_plot = ggplot(data = artist,
aes(x = reorder(artistName, n),
y = n,
fill = n)) +
geom_col() +
labs(title = 'Number of songs played by artist',
y = 'Amount',
x = "Artist",
subtitle = 'Sep 2023 - Sep 2024',
legend = 'Amount') +
theme_minimal() +
coord_flip()
# View plot
artist_played_plot
# set up
setwd(dirname(rstudioapi::getSourceEditorContext()$path)) # set working directory
# install packages
if (!require("pacman")) install.packages("pacman")
p_load(caret, tidyverse, kableExtra, glmnet, performanceEstimation, class,
rpart, rattle, plyr, randomForest, rpart.plot, ggpubr) # load packages
# load dataset
data <- read_csv("startup data.csv")
data %>% is.na() %>% colSums() # check NAs per column
# set up
setwd(dirname(rstudioapi::getSourceEditorContext()$path)) # set working directory
# install packages
if (!require("pacman")) install.packages("pacman")
p_load(caret, tidyverse, kableExtra, glmnet, performanceEstimation, class,
rpart, rattle, plyr, randomForest, rpart.plot, ggpubr) # load packages
# load dataset
data <- read_csv("startup data.csv")
data %>% is.na() %>% colSums() # check NAs per column
colnames(data)
View(data)
# clean data by removing columns that has NAs
final_data <- data[,-c(1:14,23,40,47)] # remove all NAs column
View(final_data)
?colMeans
final_data <- final_data[, which(colMeans(!is.na(final_data)) > 0.8)] # remove columns that has more than 80% NA
final_data
View(final_data)
final_data[,which(is.na(final_data))]
final_data[,which(is.na(final_data$age_first_milestone_year))]
final_data %>% is.na() %>% colSums() # check NAs per column
final_data[,which(is.na(final_data$age_first_milestone_year))]
final_data %>% is.na()
?mutate
final_data %>%
mutate(age_first_funding_year = ifelse(is.na(final_data),
0, age_first_funding_year))
final_data %>%
mutate(age_first_funding_year = ifelse(is.na(final_data),
0, age_first_funding_year)) %>% View()
final_data %>%
mutate(age_first_funding_year = ifelse(is.na(age_first_funding_year),
0, age_first_funding_year)) %>% View()
final_data %>%
mutate(age_first_funding_year = ifelse(is.na(age_first_milestone_year),
0, age_first_milestone_year)) %>% View()
final_data %>%
mutate(age_first_funding_year = ifelse(is.blank(age_first_milestone_year),
0, age_first_milestone_year)) %>% View()
final_data %>%
mutate(age_first_milestone_year = ifelse(is.na(age_first_milestone_year),
0, age_first_milestone_year)) %>% View()
final_data %>%
mutate(age_first_milestone_year = ifelse(is.na(age_first_milestone_year),
0, age_first_milestone_year),
age_last_milestone_year = ifelse(is.na(age_last_milestone_year),
0, age_last_milestone_year))
final_data2 %>% is.na() %>% colSums() # check NAs per column
final_data2 <- final_data %>%
mutate(age_first_milestone_year = ifelse(is.na(age_first_milestone_year),
0, age_first_milestone_year),
age_last_milestone_year = ifelse(is.na(age_last_milestone_year),
0, age_last_milestone_year))
final_data2 %>% is.na() %>% colSums() # check NAs per column
final_data2$status %>% unique()
final_data2$status %>% str()
# change to factors
final_data2$status <- mapvalues(final_data2$status,
from = c('acquired', 'closed'),
to = c(1,0))
final_data2$status %>% str()
final_data2 <- final_data %>%
mutate(age_first_milestone_year = ifelse(is.na(age_first_milestone_year),
0, age_first_milestone_year),
age_last_milestone_year = ifelse(is.na(age_last_milestone_year),
0, age_last_milestone_year))
final_data2 %>% is.na() %>% colSums() # check NAs per column
final_data2$status %>% str()
# change to factors
final_data2$status <- mapvalues(final_data2$status,
from = c('acquired', 'closed'),
to = c('acquired','closed'))
final_data2$status %>% str()
final_data2 <- final_data %>%
mutate(age_first_milestone_year = ifelse(is.na(age_first_milestone_year),
0, age_first_milestone_year),
age_last_milestone_year = ifelse(is.na(age_last_milestone_year),
0, age_last_milestone_year))
final_data2 %>% is.na() %>% colSums() # check NAs per column
final_data2$status %>% str()
final_data2$status <- as.factor(final_data2$status) # change to factor for target variable
final_data2$status %>% str()
final_data2 <- final_data %>%
mutate(age_first_milestone_year = ifelse(is.na(age_first_milestone_year),
0, age_first_milestone_year),
age_last_milestone_year = ifelse(is.na(age_last_milestone_year),
0, age_last_milestone_year))
final_data2$status %>% str()
# change to factors
final_data2$status <- mapvalues(final_data2$status,
from = c('acquired', 'closed'),
to = c(1,0)) # 1 = acquired, 0 = close
final_data2$status %>% str()
final_data2$status <- as.factor(final_data2$status) # change to factor for target variable
final_data2$status %>% str()
